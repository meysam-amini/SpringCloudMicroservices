image: $CI_REGISTRY/maven:jdk-21

stages:
  - build
  - unit_tests
  - integration_tests
  - deploy



variables:
  GIT_STRATEGY: clone
  GIT_DEPTH: 0
  CI_REGISTRY: "163.5.94.91:5000" # Your Docker registry
  CI_SERVER_URL: "http://163.5.94.91:8080"
  CI_REPOSITORY_URL: "http://163.5.94.91:8080"
  MODULES: "backoffice-webapi " # Define the list of modules to build and push

# Cache Maven dependencies
cache:
  paths:
    - .m2/repository

before_script:
  - echo $CI_REPOSITORY_URL
  - echo $GITLAB_USER_LOGIN
  - echo $CI_PROJECT_URL
  # Docker login step to authenticate to the private Docker registry
  - git remote set-url origin http://163.5.94.91:8080/meysam-team/springcloudmicroservices.git
  - echo $CI_REGISTRY_PASSWORD | docker login 163.5.94.91:5000 --username $CI_REGISTRY_USERNAME --password-stdin


build:
  stage: build
  tags:
    - maven
  script:
    - echo $CI_REPOSITORY_URL
    - echo $GITLAB_USER_LOGIN
    - echo $CI_PROJECT_URL
    # Docker login step to authenticate to the private Docker registry
    - git remote set-url origin http://163.5.94.91:8080/meysam-team/springcloudmicroservices.git
    - echo $CI_REGISTRY_PASSWORD | docker login 163.5.94.91:5000 --username $CI_REGISTRY_USERNAME --password-stdin
    - echo "Building the project with dev profile..."
    - mvn clean package -Pdev -Dmaven.test.skip=true
  artifacts:
    paths:
      - target/*.jar
  only:
    changes:
      - src/**/*
      - Dockerfile
      - pom.xml
    refs:
      - dev
      - main

unit_tests:
  stage: unit_tests
  tags:
    - maven
  script:
    - echo "Running Unit Tests..."
    - mvn test
  only:
    changes:
      - src/**/*
      - Dockerfile
      - pom.xml
    refs:
      - dev

integration_tests:
  stage: integration_tests
  tags:
    - maven
  script:
    - echo "Running Integration Tests with dev profile..."
    - mvn -Pdev -Dskip.ut=true verify
  only:
    - main

deploy:
  stage: deploy
  tags:
    - maven
  script: |
    echo "Building and pushing Docker images for modules..."
    
    # Define the list of modules
    MODULES=("backoffice-webapi" "another-module")
    
    # Loop through each module and build, tag, and push the Docker images
    for MODULE in "${MODULES[@]}"
    do
      echo "Building Docker image for $MODULE..."
      docker-compose -f docker-compose.yml build $MODULE
    
      echo "Tagging and pushing image $CI_REGISTRY/$MODULE:latest..."
      docker tag $MODULE:latest $CI_REGISTRY/$MODULE:latest
      docker push $CI_REGISTRY/$MODULE:latest
    done
    
    # Pull images and deploy containers with Docker Compose
    echo "Pulling images and deploying containers with Docker Compose..."
    docker-compose pull
    docker-compose up -d
  only:
    - main

