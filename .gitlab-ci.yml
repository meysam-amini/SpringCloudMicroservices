image: maven:3.8.5-openjdk-17

stages:
  - build
  - unit_tests
  - integration_tests
  - deploy

cache:
  paths:
    - .m2/repository

variables:
  MAVEN_CLI_OPTS: ""
#  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode --errors --fail-at-end --show-version"

before_script:
#  - git remote set-url origin http://163.5.94.91/meysam-team/springcloudmicroservices.git
#  - echo "Setting up Maven environment"
#  - mvn $MAVEN_CLI_OPTS --version

build:
  stage: build
  tags:
    - maven
  script:
#    - mvn $MAVEN_CLI_OPTS clean package  -Dmaven.test.skip=true
    - mvn clean package  -Dmaven.test.skip=true
  artifacts:
    paths:
      - target/*.jar

unit_tests:
  stage: unit_tests
  tags:
    - maven
  script:
    - echo "Running Unit Tests..."
    - mvn test
  only:
    - dev


integration_tests:
  stage: integration_tests
  tags:
    - maven
  image: maven:3.8.5-openjdk-17  # Make sure you're using a Docker image
  services:
    - docker:20.10.16-dind  # Docker in Docker service

  variables:
    DOCKER_TLS_CERTDIR: ""   # Disable Docker TLS (if necessary)
    TESTCONTAINERS_RYUK_DISABLED: "true"  # Testcontainers might try to use Ryuk, disabling it helps in GitLab
    DOCKER_HOST: tcp://docker:2375  # Point to the Docker daemon inside the DinD service
    DOCKER_DRIVER: overlay2          # Specify Docker driver if necessary

  before_script:
    - apt-get update && apt-get install -y curl python3 python3-pip docker.io  # Use apt-get for Debian-based images
    - curl --version  # Verify curl is installed
    - docker --version  # Verify Docker CLI is installed
    - mvn --version  # Verify Maven is available
  script:
    - echo "Running Integration Tests..."
    - mvn -Dskip.ut=true verify
  only:
    - main


deploy:
  stage: deploy
  tags:
    - maven
  only:
    - main
  script:
    - echo "Deploy to production server...."
    # You can add scp, rsync, or other deployment scripts here
